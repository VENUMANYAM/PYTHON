def permuteUnique(nums):
    def backtrack(permutation, used):
        if len(permutation) == len(nums):
            result.append(permutation[:])  # Add a copy of permutation to the result list
            return
        for i in range(len(nums)):
            if used[i] or (i > 0 and nums[i] == nums[i - 1] and not used[i - 1]):
                continue
            used[i] = True
            permutation.append(nums[i])
            backtrack(permutation, used)
            used[i] = False
            permutation.pop()

    nums.sort()
    result = []
    used = [False] * len(nums)
    backtrack([], used)
    return result

# Example usage:
nums = [1, 1, 2]
print(permuteUnique(nums))
